const { createApp } = VuecreateApp({    delimiters: ['${', '}$'],    mixins: [window.mix ? window.mix : {}],    methods:{        getCookie(name) { // TODO завем нужн и нужн ли для каждого пост запроса        let cookieValue = null;        if (document.cookie && document.cookie !== '') {            const cookies = document.cookie.split(';');            for (let i = 0; i < cookies.length; i++) {                const cookie = cookies[i].trim();                // Does this cookie string begin with the name we want?                if (cookie.substring(0, name.length + 1) === (name + '=')) {                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));                    break;                    }                }            }        return cookieValue;        },        postData(url, payload, config) {            return axios.post(url, payload, config ? config : {})                .then(response => {                    return response.data ? response.data : response.json?.()                })                .catch(() => {                    console.warn('Метод ' + url + ' не реализован')                    throw new Error('no "post" method')                })        },        getData(url, payload) {            return axios.get(url, { params: payload })                .then(response => {                    return response.data ? response.data : response.json?.()                })                .catch(() => {                    console.warn('Метод ' + url + ' не реализован')                    throw new Error('no "get" method')                })        },        updateData(url, payload, config) {            return axios.put(url,  payload, config ? config : {})                .then(response => {                    return response.data ? response.data : response.json?.()                })                .catch(() => {                    console.warn('Метод ' + url + ' не реализован')                    throw new Error('no "update" method')                })        },        deleteData(url, payload, config) {            return axios.delete(url, config ? config : {}, { data: payload })                .then(response => {                    return response.data ? response.data : response.json?.()                })                .catch(() => {                    console.warn('Метод ' + url + ' не реализован')                    throw new Error('no "delete" method')                })        },        search() {            location.assign(`/catalog/`)        },  // TODO настроить поиск        getCategories() {            this.getData('/api/categories/')            .then(data => this.categories = data)            .catch(() => {                    console.warn('Ошибка получения категорий')                    this.categories = []            })        },        getBasket() {            this.getData('/api/basket/')            .then(data => {                    data.forEach(item => { this.basket[item.id] = { ...item } })            })            .catch(() => {                    console.warn('Ошибка при получении корзины')                    this.basket = {}            })        },        addToBasket (product_id, quantity) {            this.postData(                '/api/basket/',                { quantity: quantity || 1, product_id: product_id },                { headers: { 'X-CSRFToken': this.getCookie('csrftoken'), }}            )            .then(data => { this.basket[data.id] = data })            .catch(() => { console.warn('Ошибка при добавлении товара в корзину')} )        },        updateToBasket (basket_product_id, quantity) {            const basket = {}            this.updateData(                '/api/basket/' + basket_product_id,                { quantity: quantity },                { headers: {'X-CSRFToken': this.getCookie('csrftoken'),}}            )            .then( data => { this.basket[data.id] = data })            .catch(() => { console.warn('Ошибка при обновление количества товара в корзине') })        },        removeFromBasket(basket_product_id) {            const basket = this.basket            this.deleteData(                '/api/basket/' + basket_product_id,                {},                { headers: {'X-CSRFToken': this.getCookie('csrftoken'),}}            )            .then( delete this.basket[basket_product_id])            .catch(() => {console.warn('Ошибка при удалении товара из корзины')})        },        submitBasket () {            this.postData(                '/api/orders/',                {products: Object.values(this.basket)},                { headers: {'X-CSRFToken': this.getCookie('csrftoken')}}            )            .then(                data => {                    this.order.id = data.id                    this.order.products = data.products                    this.basket = {}                    location.assign('/order/')            })            .catch(() => {console.warn('Ошибка при создании заказа')})        }    },    computed: {        basketCount () {            return (                this.basket && Object.values(this.basket)?.reduce((acc, val) => {                    acc.quantity += val.quantity                    acc.fixed_price += val.fixed_price * val.quantity                    return acc                },                { quantity: 0, fixed_price: 0 })            )            ?? { quantity: 0, fixed_price: 0 }        }    },    data() {        return {            // catalog page            filters: { // TODO  убрать в каталог?                price: {                    minValue: 1,                    maxValue: 150000,                    currentFromValue: 1,                    currentToValue: 100000,                },            },            sortRules: [ // TODO   и это тоже                { id: 'rating', title: 'Популярности'},                { id: 'price', title: 'Цене'},                { id: 'reviews', title: 'Отзывам'},                { id: 'created_at', title: 'Новизне'},            ],            topTags: [],            categories: [],            orders: [],            paymentData: {}, // Где            basket: {}, // так карт или баскет            order: {  // а не дублируется ли                orderId: null,                createdAt: '',                products: [],                fullName: '',                phone: '',                email: '',                deliveryType: '',                city: '',                address: '',                paymentType: '',                totalCost: 0,                status: ''            },            searchText: '',  // TODO  как передать в каталог            isCatalogLoaded: false        }    },    mounted() {        this.getCategories()        this.getBasket()    }}).mount('#site')